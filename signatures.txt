#light





namespace ImageLibrary
  module Operations = begin
    val grayVal : r:int * g:int * b:int -> int * int * int
    val Grayscale :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list -> (int * int * int) list list
    val applyThreshold :
      t:'a -> d:int -> r:'a * g:'a * b:'a -> int * int * int
        when 'a : comparison
    val Threshold :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list ->
              threshold:int -> (int * int * int) list list
    val FlipHorizontal :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list -> (int * int * int) list list
    val colorDifference : int * int * int -> int * int * int -> float
    val updateList :
      int * int * int ->
        int * int * int -> int * int * int -> t:int -> int * int * int
    val update :
      row:(int * int * int) list ->
        rowIndex:int ->
          image:(int * int * int) list list -> t:int -> (int * int * int) list
    val EdgeDetect :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list ->
              threshold:int -> (int * int * int) list list
    val RotateRight90 :
      width:int ->
        height:int ->
          depth:int ->
            image:(int * int * int) list list -> (int * int * int) list list
  end

